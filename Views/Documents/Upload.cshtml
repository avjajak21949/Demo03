@model Demo03.Models.Document

@{
    ViewData["Title"] = "Upload Document";
}

<div class="container">
    <h2>Upload Document</h2>
    <div class="row">
        <div class="col-md-8">
            <form asp-action="Upload" method="post" enctype="multipart/form-data" id="uploadForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                
                <div class="form-group mb-3">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" class="form-control" required />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Description" class="control-label"></label>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Type" class="control-label"></label>
                    <select asp-for="Type" class="form-control" asp-items="Html.GetEnumSelectList<DocumentType>()" required>
                        <option value="">-- Select Type --</option>
                    </select>
                    <span asp-validation-for="Type" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="ClassID" class="control-label">Class</label>
                    <select asp-for="ClassID" class="form-control" asp-items="ViewBag.ClassID">
                        <option value="">-- Select Class --</option>
                    </select>
                </div>

                <div class="form-group mb-3">
                    <div id="dropZone" class="border rounded p-4 text-center" style="min-height: 150px; cursor: pointer;">
                        <i class="fas fa-cloud-upload-alt fa-3x mb-3"></i>
                        <p class="mb-0">Drag and drop files here or click to select</p>
                        <small class="text-muted d-block mt-2">Maximum file size: 10MB</small>
                        <input type="file" name="file" id="fileInput" class="d-none" required />
                    </div>
                    <div id="filePreview" class="mt-3 d-none">
                        <div class="alert alert-info">
                            <i class="fas fa-file me-2"></i>
                            <span id="fileName"></span>
                            <span id="fileSize" class="ms-2 text-muted"></span>
                            <button type="button" class="btn-close float-end" onclick="clearFile()"></button>
                        </div>
                    </div>
                    <div id="sizeError" class="alert alert-danger mt-3 d-none">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        File size exceeds the maximum limit of 10MB. Please select a smaller file.
                    </div>
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary" id="submitBtn" disabled>
                        <i class="fas fa-upload me-2"></i>Upload
                    </button>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Back to List
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const filePreview = document.getElementById('filePreview');
        const fileNameSpan = document.getElementById('fileName');
        const fileSizeSpan = document.getElementById('fileSize');
        const sizeError = document.getElementById('sizeError');
        const submitBtn = document.getElementById('submitBtn');
        const form = document.getElementById('uploadForm');
        const maxFileSize = 10 * 1024 * 1024; // 10MB in bytes

        // Handle drag and drop
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        function highlight(e) {
            dropZone.classList.add('bg-light');
        }

        function unhighlight(e) {
            dropZone.classList.remove('bg-light');
        }

        dropZone.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        }

        // Handle click to select
        dropZone.addEventListener('click', () => {
            fileInput.click();
        });

        fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function handleFiles(files) {
            if (files.length > 0) {
                const file = files[0];
                if (file.size > maxFileSize) {
                    showSizeError(true);
                    clearFile();
                    return;
                }
                showSizeError(false);
                showFilePreview(file);
                submitBtn.disabled = false;
            }
        }

        function showFilePreview(file) {
            fileNameSpan.textContent = file.name;
            fileSizeSpan.textContent = `(${formatFileSize(file.size)})`;
            filePreview.classList.remove('d-none');
            dropZone.classList.add('d-none');
        }

        function showSizeError(show) {
            if (show) {
                sizeError.classList.remove('d-none');
                setTimeout(() => {
                    sizeError.classList.add('d-none');
                }, 5000);
            } else {
                sizeError.classList.add('d-none');
            }
        }

        function clearFile() {
            fileInput.value = '';
            filePreview.classList.add('d-none');
            dropZone.classList.remove('d-none');
            submitBtn.disabled = true;
            showSizeError(false);
        }

        // Form submission
        form.addEventListener('submit', function(e) {
            if (!fileInput.files.length) {
                e.preventDefault();
                alert('Please select a file to upload');
                return;
            }
            
            const file = fileInput.files[0];
            if (file.size > maxFileSize) {
                e.preventDefault();
                showSizeError(true);
                return;
            }
            
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
        });
    </script>
} 