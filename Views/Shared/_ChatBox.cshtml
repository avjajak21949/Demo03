@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager

@if (User.Identity.IsAuthenticated)
{
    var currentUser = await UserManager.GetUserAsync(User);
    var isEmployer = currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Employer");
    
    if (!isEmployer)
    {
        <input type="hidden" id="currentUserId" value="@UserManager.GetUserId(User)" />
        <div class="chat-box" id="chatBox">
            <div class="chat-header">
                <h5>Chat</h5>
                <span id="connectionStatus" class="badge bg-secondary">Connecting...</span>
                <button class="btn btn-sm btn-link" onclick="toggleChat()">_</button>
            </div>
            <div class="chat-body">
                <div class="chat-recipient">
                    <select id="recipientSelect" class="form-select" onchange="changeRecipient()">
                        <option value="">Select recipient...</option>
                    </select>
                </div>
                <div class="messages" id="messageList"></div>
                <div class="chat-input">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type a message...">
                        <button class="btn btn-primary" id="sendButton" onclick="sendMessage()" disabled>Send</button>
                    </div>
                </div>
            </div>
        </div>

        <style>
            .chat-box {
                position: fixed;
                bottom: 20px;
                right: 20px;
                width: 300px;
                background: white;
                border: 1px solid #ddd;
                border-radius: 5px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                z-index: 1000;
            }
            .chat-header {
                padding: 10px;
                background: #f8f9fa;
                border-bottom: 1px solid #ddd;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            .chat-body {
                height: 400px;
                display: flex;
                flex-direction: column;
            }
            .chat-recipient {
                padding: 10px;
                border-bottom: 1px solid #ddd;
            }
            .messages {
                flex-grow: 1;
                overflow-y: auto;
                padding: 10px;
            }
            .chat-input {
                padding: 10px;
                border-top: 1px solid #ddd;
            }
            .message {
                margin-bottom: 10px;
                padding: 8px;
                border-radius: 5px;
            }
            .message.sent {
                background: #007bff;
                color: white;
                margin-left: 20%;
            }
            .message.received {
                background: #f1f1f1;
                margin-right: 20%;
            }
            .message .sender {
                font-size: 0.8em;
                font-weight: bold;
                margin-bottom: 2px;
            }
            #connectionStatus {
                font-size: 0.8em;
                margin-right: 10px;
            }
            #connectionStatus.connected {
                background-color: #28a745;
            }
            #connectionStatus.disconnected {
                background-color: #dc3545;
            }
            .system-message {
                background-color: #f8f9fa;
                color: #6c757d;
                text-align: center;
                padding: 5px;
                margin: 5px 0;
                font-size: 0.8em;
                font-style: italic;
            }
        </style>

        <script src="~/lib/microsoft/signalr/signalr.min.js"></script>
        <script>
            // Add system message to chat
            function addSystemMessage(message) {
                const messageList = document.getElementById("messageList");
                const systemDiv = document.createElement("div");
                systemDiv.className = "system-message";
                systemDiv.textContent = message;
                messageList.appendChild(systemDiv);
                systemDiv.scrollIntoView({ behavior: 'smooth' });
            }

            // Initialize chat connection
            let connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub", {
                    skipNegotiation: false,
                    transport: signalR.HttpTransportType.WebSockets
                })
                .withAutomaticReconnect([0, 2000, 5000, 10000, 20000])
                .configureLogging(signalR.LogLevel.Information)
                .build();

            const connectionStatus = document.getElementById("connectionStatus");
            const sendButton = document.getElementById("sendButton");
            const messageInput = document.getElementById("messageInput");
            const recipientSelect = document.getElementById("recipientSelect");
            let currentRecipientId = "";

            function updateConnectionStatus(status) {
                connectionStatus.textContent = status;
                connectionStatus.className = 'badge ' + 
                    (status === 'Connected' ? 'bg-success' : 
                     status === 'Disconnected' ? 'bg-danger' : 'bg-secondary');
            }

            connection.on("ReceiveMessage", function (senderId, senderName, message) {
                const currentUserId = document.getElementById("currentUserId").value;
                const messageDiv = document.createElement("div");
                messageDiv.className = `message ${senderId === currentUserId ? 'sent' : 'received'}`;
                
                const senderDiv = document.createElement("div");
                senderDiv.className = "sender";
                senderDiv.textContent = senderId === currentUserId ? "You" : senderName;
                
                const contentDiv = document.createElement("div");
                contentDiv.textContent = message;
                
                messageDiv.appendChild(senderDiv);
                messageDiv.appendChild(contentDiv);
                
                document.getElementById("messageList").appendChild(messageDiv);
                messageDiv.scrollIntoView({ behavior: 'smooth' });
            });

            async function sendMessage() {
                if (connection.state !== signalR.HubConnectionState.Connected) {
                    alert("Not connected to chat server. Please wait...");
                    return;
                }

                if (!currentRecipientId) {
                    alert("Please select a recipient first.");
                    return;
                }

                const message = messageInput.value.trim();
                if (!message) return;

                try {
                    sendButton.disabled = true;
                    await connection.invoke("SendMessage", message, currentRecipientId);
                    messageInput.value = '';
                } catch (error) {
                    console.error('Error sending message:', error);
                    alert("Failed to send message. Please try again.");
                } finally {
                    sendButton.disabled = false;
                }
            }

            messageInput.addEventListener("keypress", function (e) {
                if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            function toggleChat() {
                const chatBox = document.getElementById("chatBox");
                const chatBody = chatBox.querySelector(".chat-body");
                if (chatBody.style.display === "none") {
                    chatBody.style.display = "flex";
                } else {
                    chatBody.style.display = "none";
                }
            }

            async function loadUsers() {
                try {
                    const response = await fetch('/api/account/users');
                    if (response.ok) {
                        const data = await response.json();
                        if (data && data.users) {
                            recipientSelect.innerHTML = '<option value="">Select recipient...</option>';
                            data.users.forEach(user => {
                                const option = document.createElement('option');
                                option.value = user.id;
                                option.textContent = user.name;
                                recipientSelect.appendChild(option);
                            });
                        }
                    }
                } catch (error) {
                    console.error('Error loading users:', error);
                }
            }

            async function changeRecipient() {
                currentRecipientId = recipientSelect.value;
                if (currentRecipientId) {
                    // Clear message list
                    document.getElementById("messageList").innerHTML = "";
                    
                    // Load chat history
                    await loadChatHistory(currentRecipientId);
                    
                    // Enable send button
                    sendButton.disabled = false;
                } else {
                    // Disable send button
                    sendButton.disabled = true;
                }
            }

            // Load chat history
            async function loadChatHistory(userId) {
                try {
                    const response = await fetch(`/api/chat/history/${userId}`);
                    if (response.ok) {
                        const history = await response.json();
                        if (history && history.messages && history.messages.length > 0) {
                            addSystemMessage("Previous messages:");
                            history.messages.forEach(msg => {
                                const currentUserId = document.getElementById("currentUserId").value;
                                const messageDiv = document.createElement("div");
                                messageDiv.className = `message ${msg.senderId === currentUserId ? 'sent' : 'received'}`;
                                
                                const senderDiv = document.createElement("div");
                                senderDiv.className = "sender";
                                senderDiv.textContent = msg.senderId === currentUserId ? "You" : msg.senderName;
                                
                                const contentDiv = document.createElement("div");
                                contentDiv.textContent = msg.content;
                                
                                messageDiv.appendChild(senderDiv);
                                messageDiv.appendChild(contentDiv);
                                
                                document.getElementById("messageList").appendChild(messageDiv);
                            });
                            addSystemMessage("New messages:");
                        }
                    }
                } catch (error) {
                    console.error('Error loading chat history:', error);
                }
            }

            // Start the connection
            async function startConnection() {
                try {
                    updateConnectionStatus("Connecting...");
                    await connection.start();
                    updateConnectionStatus("Connected");
                    
                    const currentUserId = document.getElementById("currentUserId").value;
                    await connection.invoke("JoinChat", currentUserId);
                    
                    // Load users for recipient selection
                    await loadUsers();
                } catch (err) {
                    console.error('SignalR Connection Error: ', err);
                    updateConnectionStatus("Disconnected");
                    sendButton.disabled = true;
                    setTimeout(startConnection, 5000);
                }
            }

            connection.onreconnecting(() => {
                updateConnectionStatus("Reconnecting...");
                sendButton.disabled = true;
            });

            connection.onreconnected(() => {
                updateConnectionStatus("Connected");
                if (currentRecipientId) {
                    sendButton.disabled = false;
                }
            });

            connection.onclose(() => {
                updateConnectionStatus("Disconnected");
                sendButton.disabled = true;
                setTimeout(startConnection, 5000);
            });

            // Start the connection when the page loads
            startConnection();
        </script>
    }
}